;; -*- mode: scheme -*-

(FPCore ( x0  y0  z0
              vx0 vy0 vz0)
        :name "n_body_simulation"
        :fpbench-domain science
        :pre (and (< -6 x0 6) (< -6 y0 6) (< -0.2 z0 0.2)
                  (< -3 vx0 3) (< -3 vy0 3) (< -0.1 vz0 0.1))
        (let ([dt 0.1]
              [solarMass 39.47841760435743])
          (while (< i 100)
                 ([x x0 (let ([distance (sqrt (+ (+ (* x x) (* y y)) (* z z)))])
                          (let ([mag (/ dt (* (* distance distance) distance))])
                            (let ([vxNew (- vx (* (* x solarMass) mag))])
                              (+ x (* dt vxNew)))))]
                  [y y0 (let ([distance (sqrt (+ (+ (* x x) (* y y)) (* z z)))])
                          (let ([mag (/ dt (* (* distance distance) distance))])
                            (let ([vyNew (- vy (* (* y solarMass) mag))])
                              (+ y (* dt vyNew)))))]
                  [z z0 (let ([distance (sqrt (+ (+ (* x x) (* y y)) (* z z)))])
                          (let ([mag (/ dt (* (* distance distance) distance))])
                            (let ([vzNew (- vz (* (* z solarMass) mag))])
                              (+ z (* dt vzNew)))))]
                  [vx vx0 (let ([distance (sqrt (+ (+ (* x x) (* y y)) (* z z)))])
                            (let ([mag (/ dt (* (* distance distance) distance))])
                              (- vx (* (* x solarMass) mag))))]
                  [vy vy0 (let ([distance (sqrt (+ (+ (* x x) (* y y)) (* z z)))])
                            (let ([mag (/ dt (* (* distance distance) distance))])
                              (- vy (* (* y solarMass) mag))))]
                  [vz vz0 (let ([distance (sqrt (+ (+ (* x x) (* y y)) (* z z)))])
                            (let ([mag (/ dt (* (* distance distance) distance))])
                              (- vz (* (* z solarMass) mag))))]
                  [i 0 (+ i 1)]) ;; Is a variable number of iterations in the
                 ;; original. Needs inputs of type int to work
                 ;; properly.
                 x)))
