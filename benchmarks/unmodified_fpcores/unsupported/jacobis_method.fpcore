;; -*- mode: scheme -*-

(FPCore (a11 a22 a33 a44 b1 b2 b3 b4)
        :name "jacobis_method"
        :description "Solve a linear system `Ax = b`.
Inputs: Array entries `aij`; vector entries `bi`"
        :cite (atkinson-1989)
        :fpbench-domain mathematics
        :precision binary32
        :example ([a11 0.61] [a22 0.62] [a33 0.6006] [a44 0.601]
                  [b1 0.5] [b2 (/ 1.0 3.0)] [b3 0.25] [b4 (/ 1.0 5.0)])
        (let ([eps 0.00000000000000001])
          (while* (> e eps)
                  ([x_n1 0.0 (+ (- (- (/ b1 a11) (* (/ 0.1 a11) x2)) (* (/ 0.2 a11) x3)) (* (/ 0.3 a11) x4))]
                   [x_n2 0.0 (- (+ (- (/ b2 a22) (* (/ 0.3 a22) x1)) (* (/ 0.1 a22) x3)) (* (/ 0.2 a22) x4))]
                   [x_n3 0.0 (- (+ (- (/ b3 a33) (* (/ 0.2 a33) x1)) (* (/ 0.3 a33) x2)) (* (/ 0.1 a33) x4))]
                   [x_n4 0.0 (- (- (+ (/ b4 a44) (* (/ 0.1 a44) x1)) (* (/ 0.2 a44) x2)) (* (/ 0.3 a44) x3))]
                   [i 0.0 (+ i 1.0)]
                   [e 1.0 (fabs (- x_n4 x4))]
                   [x1 0.0 x_n1]
                   [x2 0.0 x_n2]
                   [x3 0.0 x_n3]
                   [x4 0.0 x_n4])
                  x2))) ;; `i`, `x_n2`, and `e` are also outputs but are skipped for now
