#!/usr/bin/env python3

import os.path as path
import sys

PYTHON_DIR = path.abspath(path.dirname(__file__))
GIT_DIR = path.split(PYTHON_DIR)[0]
sys.path.append(PYTHON_DIR)
sys.path.append(path.join(GIT_DIR, "src"))
sys.path.append(path.join(GIT_DIR, "src", "fptaylor"))
sys.path.append(path.join(GIT_DIR, "src", "fpcore_parser", "src"))

import check_requirements

from datetime import date
from fpcore_logging import Logger
from exceptions import DomainError, UnsupportedError, NoPreError, BadPreError
from fpcore_lexer import FPCoreLexer
from fpcore_parser import FPCoreParser
from z3_result import Z3Result
from tuned_expression import TunedExpression
from fptaylor_result import FPTaylorResult

import ast_modifications.all_modifications_ast as all_modifications_ast
import fptuner_argument_parser
import generate_graph
import os
import glob
import shutil

logger = Logger(level=Logger.HIGH, color=Logger.green)

def sanitize_name(name):
    bad_chars = {".", ":", " ", "-"}
    for c in bad_chars:
        name = name.replace(c, "_")
    return name

def main(argv):
    args = fptuner_argument_parser.parse_args(argv)

    # Grab all functions from the modifications table
    sins = [row[1] for row in all_modifications_ast.OperationTable
            if row[0] == "sin"]
    exps = [row[1] for row in all_modifications_ast.OperationTable
            if row[0] == "exp"]
    logs = [row[1] for row in all_modifications_ast.OperationTable
            if row[0] == "log"]
    tans = [row[1] for row in all_modifications_ast.OperationTable
            if row[0] == "tan"]
    operations = {"sin": sins,
                  "exp": exps,
                  "log": logs,
                  "tan": tans}

    # Setup the search space
    search_space = {"bit_widths": ["fp64"], #args.bit_widths,
                    "operations": operations}

    lexer = FPCoreLexer()
    parser = FPCoreParser()

    for query_file in args.query_files:
        try:
            with open(query_file, "r") as f:
                text = f.read()

        except FileNotFoundError:
            logger.error("Unable to find file '{}'", query_file)
            continue

        # todo: add try catch for lex and parse errors
        tokens = lexer.tokenize(text)
        fpcores = parser.parse(tokens)

        if len(fpcores) == 0:
            logger.error("No FPCore found in file '{}'", query_file)
            continue

        for fpcore in fpcores:
            try:
                signatures = list()
                names = list()
                ssa = fpcore.to_single_assignment(search_space)
                if args.nightly:
                    print("<h1>{}</h1>".format(ssa.name))
                else:
                    print(ssa.name)

                ssa.get_fptaylor_forms()
                ssa.get_fptaylor_maximums()
                first_header = None
                rows = []
                z3_errors = []
                for e in args.error:
                    zr = Z3Result(ssa, e)
                    z3_errors.append(str(float(zr.model["total_error"].as_fraction())))
                    tr = TunedExpression(ssa, zr)

                    if args.cfile:
                        name = sanitize_name(ssa.name)
                        func_name = "{}_error_{}".format(name, str(e).replace(".","_").replace("-","m"))
                        filename = func_name + ".c"
                        tr.name = func_name
                        content = tr.to_c_function()
                        names.append(func_name)
                        signatures.append(tr.signature)
                        with open(filename, "w") as f:
                            f.write('#include "impls.h"\n\n')
                            f.write(content)

                    header, row = tr.tsv()

                    if first_header is None:
                        first_header = header
                    elif first_header != header:
                        logger.error("Header mismatch: \n{} \n{}",
                                     first_header, header)
                        sys.exit(1)

                    if args.check:
                        query = tr.to_fptaylor()
                        res = FPTaylorResult(query, FPTaylorResult.CHECK_CONFIG)
                        if res.div_by_zero:
                            logger.error("FPTaylor thinks division by zero is possible")
                            row.append("nan")
                            row.append("DivByZero")
                        elif res.log_of_non_positive:
                            logger.error("FPTaylor thinks log of a non positive number is possible")
                            row.append("nan")
                            row.append("LogNonPos")
                        elif res.inf_val:
                            logger.error("FPTaylor thinks an infinite value is possible")
                            row.append("nan")
                            row.append("InfVal")
                        elif res.abs_error is None:
                            logger.error("FPTaylor did not find an error value")
                            res.write_file("failed_{}_{}.txt".format(sanitize_name(ssa.name), str(e).replace(".","_").replace("-","m")))
                            res.abs_error = float("nan")
                            row.append("nan")
                            row.append("N/A")
                        else:
                            logger("FPTaylor error bound: {}", res.abs_error)
                            row.append(str(res.abs_error))
                            row.append(str(res.abs_error <= e or res.high_second_order))
                    rows.append(row)

                if args.check:
                    first_header.append("FPTaylorError")
                    first_header.append("FPTaylorCheck")

                if args.nightly:
                    print("<table>")
                    print("<tr><th>" + "</th><th>".join(first_header) + "</th></tr>")
                    for row in rows:
                        print("<tr><td>" + "</td><td>".join(row) + "</td></tr>")
                    print("</table>")
                    print("<img src='{}_time.png'>".format(sanitize_name(ssa.name)))
                else:
                    print("\t".join(first_header))
                    for row in rows:
                        print("\t".join(row))

                if args.cfile:
                    time_name = "{}_time.c".format(sanitize_name(ssa.name))
                    time_contents = ['#include "timing.h"',
                                     '#include "xmalloc.h"',
                                     '#include <float.h>',
                                     '#include <math.h>',
                                     '#include <stdio.h>']
                    for name,domain in ssa.inputs.items():
                        time_contents.append("const fp64 {}_LOW = {};".format(name, domain[0]))
                        time_contents.append("const fp64 {}_HIGH = {};".format(name, domain[1]))
                    time_contents.extend(["double "+s+";" for s in signatures])
                    time_contents.append("#define FUNC_COUNT ({})".format(len(signatures)))
                    functype = {1:"unop_fp64", 2:"binop_fp64", 3:"triop_fp64", 4:"quadop_fp64", 6:"hexop_fp64"}[len(ssa.inputs)]
                    time_contents.append("{} FUNCTIONS[FUNC_COUNT] = {{{}}};".format(functype, ",".join(names)))
                    time_contents.append("char* NAMES[FUNC_COUNT] = {{{}}};".format(",".join(['"'+n+'"' for n in names])))
                    time_contents.append("char* ERRORS[FUNC_COUNT] = {{{}}};".format(",".join(['"'+str(e)+'"' for e in z3_errors])))
                    time_contents.extend(["int main(int argc, char** argv){",
                                          "size_t log2_values = 18;",
                                          "size_t secs = 10;",
                                          "size_t runs = 3;",
                                          "if (argc > 1) { log2_values = strtoul(argv[1], NULL, 10); }",
                                          "if (argc > 2) { secs = strtoul(argv[2], NULL, 10); }",
                                          "if (argc > 3) { runs = strtoul(argv[3], NULL, 10); }",
                                          "timing_data_fp64* data = time_{}({},".format(functype,
                                                                                        ",".join(["{}_LOW,{}_HIGH".format(n,n) for n in ssa.inputs])),
                                          "FUNC_COUNT, FUNCTIONS, NAMES, ERRORS, log2_values, runs, secs);"
                                          "print_timing_data_fp64(data);",
                                          "free_timing_data_fp64(data);",
                                          "return 0;",
                                          "}"])
                    with open(time_name, "w") as f:
                        f.write("\n".join(time_contents))
                    cfiles = glob.glob("*.c")
                    destfiles = [path.join(GIT_DIR, "cost-measurement/kerns/{}".format(c)) for c in cfiles]
                    try:
                        os.mkdir(path.join(GIT_DIR,"cost-measurement/kerns"))
                    except FileExistsError:
                        pass
                    for src,dest in zip(cfiles, destfiles):
                        shutil.move(src, dest)
                    generate_graph.graph(time_name)

            except DomainError as e:
                if e.lower is None and e.upper is None:
                    logger.error("No domain defined for '{}'", e.name)
                elif e.lower is None:
                    logger.error("No lower bound defined for '{}'", e.name)
                else:
                    logger.error("No upper bound defined for '{}'", e.name)

            except UnsupportedError as e:
                msg = "Found unsupported FPCore language statement type '{}'"
                logger.error(msg, e.statement_type)

            except NoPreError:
                logger.error("No :pre property defined")

            except BadPreError as e:
                logger.error("Unable to process precondition: '{}'", e.pre)




if __name__ == "__main__":
    try:
        retval = main(sys.argv)
    except KeyboardInterrupt:
        sys.exit(1)
    sys.exit(retval)
